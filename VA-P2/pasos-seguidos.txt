
POSIBILIDADES:

1. Transformada de Hough: 
Ventajas: Buena para detectar líneas y círculos. Útil si las señales se ajustan a patrones geométricos simples.
Limitaciones: Menos eficaz para formas complejas o señales con variaciones significativas en posición y orientación.
2. Plantillas Deformables:
Ventajas: Flexibilidad para adaptarse a formas variadas y cambios en posición/orientación. Puede ser útil para formas específicas.
Limitaciones: Sensible a la inicialización, puede ser computacionalmente intensivo y puede requerir modelos específicos para cada forma.
3. Modelos de Detección de Objetos (YOLO, SSD, etc.):
Ventajas: Capacidad para detectar múltiples objetos en una imagen, robustez para formas variadas, aprendizaje automático para adaptarse a diferentes situaciones.
Limitaciones: Necesita datos etiquetados para entrenamiento, puede requerir recursos computacionales significativos y puede no ser óptimo si las señales son muy pequeñas o si se necesita una precisión extrema.




# 00001

def check_shape_red(contour):
    perimeter = cv2.arcLength(contour, True)
    approx = cv2.approxPolyDP(contour, 0.3 * perimeter, True)
    num_sides = len(approx)
    area = cv2.contourArea(contour)
    if num_sides >= 2 and num_sides <= 5 and area > 50:  # Triangulo
        return True
    else:
        return False

def check_shape_blue(contour):
    perimeter = cv2.arcLength(contour, True)
    approx = cv2.approxPolyDP(contour, 0.05 * perimeter, True)
    num_sides = len(approx)
    area = cv2.contourArea(contour)
    if num_sides == 4 and area > 1000:  # Cuadrado
        return True
    elif num_sides == 6 and area > 750:  # Triangulos y circulos
        return True
    else:
        return False

# 00023

def check_shape_red(contour):
    perimeter = cv2.arcLength(contour, True)
    approx = cv2.approxPolyDP(contour, 0.3 * perimeter, True)
    num_sides = len(approx)
    area = cv2.contourArea(contour)
    if num_sides >= 2 and num_sides <= 5 and area > 50:  # Triangulo
        return True
    elif num_sides == 1 and area > 1300:  # Triangulos y circulos
        return True

# 00159

def check_shape_blue(contour):
    perimeter = cv2.arcLength(contour, True)
    approx = cv2.approxPolyDP(contour, 0.05 * perimeter, True)
    num_sides = len(approx)
    area = cv2.contourArea(contour)
    if num_sides == 4 and area > 1000:  # Cuadrado
        return True
    elif num_sides == 6 and area > 750:  # Triangulos y circulos
        return True
    # elif num_sides == 5 and area > 200:  # Cuadrado
    #     return True
    elif num_sides == 3 and area > 350:  # Triangulos y circulos
        return True
    elif num_sides == 4 and area > 800:  # Triangulos y circulos
        return True
    else:
        return False


# 00171

def check_shape_red(contour):
    perimeter = cv2.arcLength(contour, True)
    approx = cv2.approxPolyDP(contour, 0.3 * perimeter, True)
    num_sides = len(approx)
    area = cv2.contourArea(contour)
    if num_sides >= 2 and num_sides <= 5 and area > 50:  # Triangulo
        return True
    elif num_sides == 1 and area > 1300:  # Triangulos y circulos
        return True
    # elif num_sides < 9 and num_sides >= 5 and area > 750:  # Triangulos y circulos
    #     return True
    # elif num_sides < 9 and num_sides >= 7 and area > 200:  # Circulos
    #     return True
    # elif num_sides < 7 and num_sides >= 5 and area > 50:  # Circulos
    #     return True
    # elif num_sides == 4 and area > 200:  # Circulos
    #     return True
    elif num_sides == 2:  # Circulos
        return True
    elif num_sides == 1 and area > 250:  # Circulos
        return True
    else:
        return False

# 00177

def check_shape_red(contour):
    perimeter = cv2.arcLength(contour, True)
    approx = cv2.approxPolyDP(contour, 0.3 * perimeter, True)
    num_sides = len(approx)
    area = cv2.contourArea(contour)
    if num_sides >= 2 and num_sides <= 5 and area > 50:  # Triangulo
        return True
    elif num_sides == 1 and area > 1300:  # Triangulos y circulos
        return True
    # elif num_sides < 9 and num_sides >= 5 and area > 750:  # Triangulos y circulos
    #     return True
    # elif num_sides < 9 and num_sides >= 7 and area > 200:  # Circulos
    #     return True
    # elif num_sides < 7 and num_sides >= 5 and area > 50:  # Circulos
    #     return True
    # elif num_sides == 4 and area > 200:  # Circulos
    #     return True
    # elif num_sides == 2:  # Circulos
    #     return True
    elif num_sides == 1 and area > 250:  # Circulos
        return True
    elif num_sides >= 1 and num_sides <= 3 and area > 50:  # Circulos
        return True
    else:
        return False

def check_shape_blue(contour):
    perimeter = cv2.arcLength(contour, True)
    approx = cv2.approxPolyDP(contour, 0.05 * perimeter, True)
    num_sides = len(approx)
    area = cv2.contourArea(contour)
    if num_sides == 4 and area > 1000:  # Cuadrado
        return True
    elif num_sides == 6 and area > 750:  # Triangulos y circulos
        return True
    # elif num_sides == 5 and area > 200:  # Cuadrado
    #     return True
    elif num_sides == 3 and area > 350:  # Triangulos y circulos
        return True
    elif num_sides == 4 and area > 800:  # Triangulos y circulos
        return True
    else:
        return False
    

# 00214

def check_shape_red(contour):
    perimeter = cv2.arcLength(contour, True)
    approx = cv2.approxPolyDP(contour, 0.3 * perimeter, True)
    num_sides = len(approx)
    area = cv2.contourArea(contour)
    if num_sides >= 2 and num_sides <= 5 and area > 50:  # Triangulo
        return True
    elif num_sides == 1 and area > 1300:  # Triangulos y circulos
        return True
    # elif num_sides < 9 and num_sides >= 5 and area > 750:  # Triangulos y circulos
    #     return True
    # elif num_sides < 9 and num_sides >= 7 and area > 200:  # Circulos
    #     return True
    # elif num_sides < 7 and num_sides >= 5 and area > 50:  # Circulos
    #     return True
    # elif num_sides == 4 and area > 200:  # Circulos
    #     return True
    # elif num_sides == 2:  # Circulos
    #     return True
    elif num_sides == 1 and area > 250:  # Circulos
        return True
    elif num_sides >= 1 and num_sides <= 3 and area > 50:  # Circulos
        return True
    else:
        return False

def check_shape_blue(contour):
    perimeter = cv2.arcLength(contour, True)
    approx = cv2.approxPolyDP(contour, 0.05 * perimeter, True)
    num_sides = len(approx)
    area = cv2.contourArea(contour)
    if num_sides == 4 and area > 1000:  # Cuadrado
        return True
    elif num_sides == 6 and area > 750:  # Triangulos y circulos
        return True
    # elif num_sides == 5 and area > 200:  # Cuadrado
    #     return True
    elif num_sides == 3 and area > 350:  # Triangulos y circulos
        return True
    elif num_sides == 4 and area > 800:  # Triangulos y circulos
        return True
    elif num_sides >= 2 and num_sides <= 4 and area > 100:  # Triangulos y circulos
        return True
    else:
        return False

# 0219

def check_shape_red(contour):
    perimeter = cv2.arcLength(contour, True)
    approx = cv2.approxPolyDP(contour, 0.3 * perimeter, True)
    num_sides = len(approx)
    area = cv2.contourArea(contour)
    if num_sides >= 2 and num_sides <= 5 and area > 50:  # Triangulo
        return True
    elif num_sides == 1 and area > 1300:  # Triangulos y circulos
        return True
    # elif num_sides < 9 and num_sides >= 5 and area > 750:  # Triangulos y circulos
    #     return True
    # elif num_sides < 9 and num_sides >= 7 and area > 200:  # Circulos
    #     return True
    # elif num_sides < 7 and num_sides >= 5 and area > 50:  # Circulos
    #     return True
    # elif num_sides == 4 and area > 200:  # Circulos
    #     return True
    # elif num_sides == 2:  # Circulos
    #     return True
    elif num_sides == 1 and area > 250:  # Circulos
        return True
    elif num_sides >= 1 and num_sides <= 3 and area > 50:  # Circulos
        return True
    else:
        return False

def check_shape_blue(contour):
    perimeter = cv2.arcLength(contour, True)
    approx = cv2.approxPolyDP(contour, 0.05 * perimeter, True)
    num_sides = len(approx)
    area = cv2.contourArea(contour)
    if num_sides == 4 and area > 1000:  # Cuadrado
        return True
    elif num_sides == 6 and area > 750:  # Triangulos y circulos
        return True
    elif num_sides == 5 and area > 1900:  # Cuadrado
        return True
    elif num_sides == 3 and area > 350:  # Triangulos y circulos
        return True
    elif num_sides == 4 and area > 800:  # Triangulos y circulos
        return True
    elif num_sides >= 2 and num_sides <= 4 and area > 100:  # Triangulos y circulos
        return True
    else:
        return False

# 00235

def check_shape_red(contour):
    perimeter = cv2.arcLength(contour, True)
    approx = cv2.approxPolyDP(contour, 0.3 * perimeter, True)
    num_sides = len(approx)
    area = cv2.contourArea(contour)
    if num_sides >= 2 and num_sides <= 5 and area > 50:  # Triangulo
        return True
    elif num_sides == 1 and area > 1300:  # Triangulos y circulos
        return True
    # elif num_sides < 9 and num_sides >= 5 and area > 750:  # Triangulos y circulos
    #     return True
    # elif num_sides < 9 and num_sides >= 7 and area > 200:  # Circulos
    #     return True
    # elif num_sides < 7 and num_sides >= 5 and area > 50:  # Circulos
    #     return True
    # elif num_sides == 4 and area > 200:  # Circulos
    #     return True
    # elif num_sides == 2:  # Circulos
    #     return True
    elif num_sides == 1 and area > 250:  # Circulos
        return True
    elif num_sides >= 1 and num_sides <= 3 and area > 50:  # Circulos
        return True
    else:
        return False

def check_shape_blue(contour):
    perimeter = cv2.arcLength(contour, True)
    approx = cv2.approxPolyDP(contour, 0.05 * perimeter, True)
    num_sides = len(approx)
    area = cv2.contourArea(contour)
    if num_sides == 4 and area > 1000:  # Cuadrado
        return True
    elif num_sides == 6 and area > 750:  # Triangulos y circulos
        return True
    elif num_sides == 5 and area > 1900:  # Cuadrado
        return True
    elif num_sides == 3 and area > 350:  # Triangulos y circulos
        return True
    elif num_sides == 4 and area > 800:  # Triangulos y circulos
        return True
    elif num_sides >= 2 and num_sides <= 4 and area > 100:  # Triangulos y circulos
        return True
    elif num_sides == 5 and area > 650:  # Triangulos y circulos
        return True
    else:
        return False

# 00262

def check_shape_red(contour):
    perimeter = cv2.arcLength(contour, True)
    approx = cv2.approxPolyDP(contour, 0.3 * perimeter, True)
    num_sides = len(approx)
    area = cv2.contourArea(contour)
    if num_sides >= 2 and num_sides <= 5 and area > 50:  # Triangulo
        return True
    elif num_sides == 1 and area > 1300:  # Triangulos y circulos
        return True
    # elif num_sides < 9 and num_sides >= 5 and area > 750:  # Triangulos y circulos
    #     return True
    # elif num_sides < 9 and num_sides >= 7 and area > 200:  # Circulos
    #     return True
    # elif num_sides < 7 and num_sides >= 5 and area > 50:  # Circulos
    #     return True
    # elif num_sides == 4 and area > 200:  # Circulos
    #     return True
    # elif num_sides == 2:  # Circulos
    #     return True
    elif num_sides == 1 and area > 250:  # Circulos
        return True
    elif num_sides >= 1 and num_sides <= 3 and area > 50:  # Circulos
        return True
    else:
        return False

def check_shape_blue(contour):
    perimeter = cv2.arcLength(contour, True)
    approx = cv2.approxPolyDP(contour, 0.05 * perimeter, True)
    num_sides = len(approx)
    area = cv2.contourArea(contour)
    if num_sides == 4 and area > 1000:  # Cuadrado
        return True
    elif num_sides == 6 and area > 750:  # Triangulos y circulos
        return True
    elif num_sides == 5 and area > 1900:  # Cuadrado
        return True
    elif num_sides == 3 and area > 350:  # Triangulos y circulos
        return True
    elif num_sides == 4 and area > 800:  # Triangulos y circulos
        return True
    elif num_sides >= 2 and num_sides <= 4 and area > 100:  # Triangulos y circulos
        return True
    elif num_sides == 5 and area > 650:  # Triangulos y circulos
        return True
    elif num_sides == 5 and area > 200:  # Triangulos y circulos
        return True
    else:
        return False